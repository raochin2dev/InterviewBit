/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicequestions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

/**
 *
 * @author cbrahmbh
 */
public class MaxDistance {
    
    public static void main(String[] args) {
        ArrayList<Integer> a = new ArrayList<Integer>();
//        a.add(3);
////        a.add(3);
////        a.add(3);
//        a.add(2);
//        a.add(4);
//        a.add(5);
//        a.add(6);
//        a.add(1);
//        a.add(2);
//        a.add(7);
          a.add(100);
          a.add(100);
          a.add(100);
          a.add(100);
          a.add(100);
//        a.add(4);
//        a.add(5);
//        a.add(2);
//        HashMap<Integer,Integer[]> res = maximumGapFn(a,0,new HashMap<Integer, Integer[]>());
////         int[] b = new int[]{5,4,3,4,5,2,3,4,5,2};
////        int[] b = new int[]{ 83564666, 2976674, 46591497, 24720696, 16376995, 63209921, 25486800, 49369261, 20465079, 64068560, 7453256, 14180682, 65396173, 45808477, 10172062, 28790225, 82942061, 88180229, 62446590, 77573854, 79342753, 2472968, 74250054, 17223599, 47790265, 24757250, 40512339, 24505824, 30067250, 82972321, 32482714, 76111054, 74399050, 65518880, 94248755, 76948016, 76621901, 46454881, 40376566, 13867770, 76060951, 71404732, 21608002, 26893621, 27370182, 35088766, 64827587, 67610608, 90182899, 66469061, 67277958, 92926221, 58156218, 44648845, 37817595, 46518269, 44972058, 27607545, 99404748, 39262620, 98825772, 89950732, 69937719, 78068362, 78924300, 91679939, 52530444, 71773429, 57678430, 75699274, 5835797, 74160501, 51193131, 47950620, 4572042, 85251576, 49493188, 77502342, 3244395, 51211050, 44229120, 2135351, 47258209, 77312779, 37416880, 59038338, 96069936, 20766025, 35497532, 67316276, 38312269, 38357645, 41600875, 58590177, 99257528, 99136750, 4796996, 84369137, 54237155, 64368327, 94789440, 40718847, 12226041, 80504660, 8177227, 85151842, 36165763, 72764013, 36326808, 80969323, 22947547, 76322099, 7536094, 18346503, 65759149, 45879388, 53114170, 92521723, 15492250, 42479923, 20668783, 64053151, 68778592, 3669297, 73903133, 28973293, 73195487, 64588362, 62227726, 17909010, 70683505, 86982984, 64191987, 71505285, 45949516, 28244755, 33863602, 18256044, 25110337, 23997763, 81020611, 10135495, 925679, 98158797, 73400633, 27282156, 45863518, 49288993, 52471826, 30553639, 76174500, 28828417, 41628693, 80019078, 64260962, 5577578, 50920883, 16864714, 54950300, 9267396, 56454292, 40872286, 33819401, 75369837, 6552946, 26963596, 22368984, 43723768, 39227673, 98188566, 1054037, 28292455, 18763814, 72776850, 47192134, 58393410, 14487674, 4852891, 44100801, 9755253, 37231060, 42836447, 38104756, 77865902, 67635663, 43494238, 76484257, 80555820, 8632145, 3925993, 81317956, 12645616, 23438120, 48241610, 20578077, 75133501, 46214776, 35621790, 15258257, 20145132, 32680983, 94521866, 43456056, 19341117, 29693292, 38935734, 62721977, 31340268, 91841822, 22303667, 96935307, 29160182, 61869130, 33436979, 32438444, 87945655, 43629909, 88918708, 85650550, 4201421, 11958347, 74203607, 37964292, 56174257, 20894491, 33858970, 45292153, 22249182, 77695201, 34240048, 36320401, 64890030, 81514017, 58983774, 88785054, 93832841, 12338671, 46297822, 26489779, 85959340 };
////        HashMap<Integer,Integer[]> res = maximumGapFnArr(b,0,new HashMap<Integer, Integer[]>());
//        int maxDist = 0;
//        for (Map.Entry<Integer, Integer[]> entry : res.entrySet()) {
//            int tempDist = entry.getValue()[1] - entry.getValue()[0];
//            maxDist = Math.max(maxDist,tempDist);
//        }
//        
//        System.out.println(maxDist);
           maxGapSortFn(a);
    }
    
    
    public static int maxGapSortFn(ArrayList<Integer> a){
        
        ArrayList<Integer> indexArr = new ArrayList<Integer>();
        for(int i =0;i < a.size();i++){
            indexArr.add(i);
        }
        indexArr = quickSortArr(a,0,a.size()-1,indexArr);
        
        int minVal = indexArr.get(0);
        int maxDist = Integer.MIN_VALUE;
        for(int i = 1 ; i < indexArr.size();i++){
            int curVal = indexArr.get(i);
            minVal = Math.min(curVal,minVal);
            int curDist = indexArr.get(i) - minVal;
            maxDist = Math.max(curDist, maxDist);
        }
        System.out.println(Arrays.toString(indexArr.toArray())+"/"+maxDist);
        return maxDist;
    }
    
    private static ArrayList<Integer> quickSortArr(ArrayList<Integer> a,int lo, int hi,ArrayList<Integer> indexArr) {
       
        if(lo < hi){
            int pivot = a.get(hi);
            int partIndex = partition(a,lo,hi,pivot,indexArr);
            quickSortArr(a,lo, partIndex-1,indexArr);
            quickSortArr(a,partIndex+1,hi,indexArr);
        }
        return indexArr;
    }
    
    private static int partition(ArrayList<Integer> a, int lo, int hi, int pivot,ArrayList<Integer> indexArr) {
        
        int partIndex = lo;
        int temp = 0;
        for(int i = partIndex; i < hi ; i++){
            if(a.get(i) <=  pivot){
                temp = a.get(partIndex);
                a.set(partIndex,a.get(i));
                a.set(i,temp);

                temp = indexArr.get(partIndex);
                indexArr.set(partIndex,indexArr.get(i));
                indexArr.set(i,temp);

                partIndex++;
            }
        }
        temp = a.get(partIndex);
        a.set(partIndex,a.get(hi));
        a.set(hi,temp);

        temp = indexArr.get(partIndex);
        indexArr.set(partIndex,indexArr.get(hi));
        indexArr.set(hi,temp);
        
        return partIndex;
    }
    
    /*
        The logic is that 
        if we encounter max val than current we update maxIndex for that value , 
    else if we encounter min value than current we go to next min value forwarding the current min val with the min,max positions for that prev val
    For eg. 3,4,5,2,3,4,5,2,1
    1)Initially minVal will be 3 the max pos for 3 will inc until 5 i.e index 2 
    2)Now we encounter val 2 so we add val 3 along with its minIndex,maxIndex to the minVals hashmap
    3) Now we repeat step 1  with val 2 but there's additional in which it is possible that we may encounter a value larger or equal to prev value 3 , 
    so we also check for the prev MinVals in the hashmap if the current value is greater or equal to that value & if yes we increment for that maxPos
    for that val in Hashmap
    
    
    */
    public static HashMap<Integer,Integer[]> maximumGapFn(List<Integer> a,int pos,HashMap<Integer,Integer[]> minVals) {
        int minVal = a.get(pos);
        int minPos = pos;
        int maxPos = pos;
        int curMaxDist;
        // Store previous Minvals along with their MinPos,MaxPos
        HashMap<Integer,Integer> otherMinVals = new HashMap<Integer, Integer>();
        for(int i = pos; i < a.size(); i++){
            // Check if current minVal is lesser than the current a[i] value
            if(minVal <= a.get(i) ){
               // Update MaxPos of current minVal
               maxPos = i;
               minVals.put(minVal, new Integer[]{minPos,i}); // Add to minVals list with MinPos,MaxPos
               for(Entry<Integer, Integer[]> entry : minVals.entrySet()) {
                Integer key = entry.getKey();
                Integer[] val = entry.getValue();
                
                // Also check for previous minVals if the current value is greater or equal, if yes then we update the MaxPos for that value
                if(key <= a.get(i)){
                    val[1] = i; // Updated MaxPos , val[0] has the MinPos it is fixed 
                    entry.setValue(val);
                }
            }
            }
            else{
                // If the next value is lesser than the current minVal then recurse the nextVal
               minVals = maximumGapFn(a,i,minVals);
               break;
            }
        }
        
        return minVals;
    }
    
    public static HashMap<Integer,Integer[]> maximumGapFnArr(int[] a,int pos,HashMap<Integer,Integer[]> minVals) {
        int minVal = a[pos];
        int minPos = pos;
        int maxPos = pos;
        int curMaxDist;
        HashMap<Integer,Integer> otherMinVals = new HashMap<Integer, Integer>();
        for(int i = pos; i < a.length; i++){
            
            if(minVal <= a[i] ){
               maxPos = i;
               minVals.put(minVal, new Integer[]{minPos,i});
               for(Entry<Integer, Integer[]> entry : minVals.entrySet()) {
                Integer key = entry.getKey();
                Integer[] val = entry.getValue();
                if(key <= a[i]){
                    val[1] = i;
                    entry.setValue(val);
                }
            }
            }
            else{
               minVals = maximumGapFnArr(a,i,minVals);
               break;
            }
        }
        
        return minVals;
    }

    

    
}
